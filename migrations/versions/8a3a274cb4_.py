"""refactor locations to clearly separate fixed and ephemeral locations

Revision ID: 8a3a274cb4
Revises: 5709c85f594
Create Date: 2015-07-22 21:40:31.152633

"""

# revision identifiers, used by Alembic.
revision = '8a3a274cb4'
down_revision = '5709c85f594'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from flask_sqlalchemy import _SessionSignalEvents
from sqlalchemy import event
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import (
        sessionmaker,
        Session as BaseSession,
        relationship,
        backref,
)

Session = sessionmaker()

event.remove(
        BaseSession,
        'before_commit',
        _SessionSignalEvents.session_signal_before_commit,
)

event.remove(
        BaseSession,
        'after_commit',
        _SessionSignalEvents.session_signal_after_commit,
)

event.remove(
        BaseSession,
        'after_rollback',
        _SessionSignalEvents.session_signal_after_rollback,
)

Base = declarative_base()

class Geolocation(Base):
    __tablename__ = 'geolocation'

    id = sa.Column(
            sa.Integer,
            primary_key=True,
    )

    latitude = sa.Column(
            sa.Float,
            nullable=False,
    )

    longitude = sa.Column(
            sa.Float,
            nullable=False,
    )

class FixedLocation(Base):
    """ Class of fixed locations on the Earth, tied to a legal address. """
    __tablename__ = 'fixedlocation'

    id = sa.Column(
            sa.Integer,
            primary_key=True,
    )

    address = sa.Column(
            sa.String,
            nullable=False,
    )

    postal_code = sa.Column(
            sa.String,
            nullable=False,
    )

    city_id = sa.Column(
            sa.Integer,
            nullable=False,
    )

    latitude = sa.Column(
            sa.Float,
            nullable=False,
    )

    longitude = sa.Column(
            sa.Float,
            nullable=False,
    )

    geolocation_id = sa.Column(
            sa.Integer,
            sa.ForeignKey('geolocation.id'),
            nullable=False,
    )

    geolocation = relationship(
            'Geolocation',
            uselist=False,
            backref='fixed_location'
    )

class Business(Base):
    __tablename__ = 'business'

    id = sa.Column(
            sa.Integer,
            primary_key=True,
    )

    fixed_location_id = sa.Column(
            sa.Integer,
            sa.ForeignKey('fixedlocation.id'),
            nullable=False,
    )

    fixed_location = relationship(
            'FixedLocation',
            backref='business',
            uselist=False,
    )

class Employee(Base):
    __tablename__ = 'employee'

    id = sa.Column(
            sa.Integer,
            primary_key=True,
    )

    fixed_location_id = sa.Column(
            sa.Integer,
            sa.ForeignKey('fixedlocation.id'),
            nullable=False,
    )

    current_location_id = sa.Column(
            sa.Integer,
            sa.ForeignKey('geolocation.id'),
            nullable=False,
    )

    fixed_location = relationship(
            'FixedLocation',
            backref='employee',
            uselist=False,
    )

    current_location = relationship(
            'Geolocation',
            backref='employee',
            uselist=False,
    )

def upgrade():
    bind = op.get_bind()
    session = Session(bind=bind)

    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('geolocation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('latitude', sa.Float(), nullable=False),
    sa.Column('longitude', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_geolocation'))
    )

    # Rename Location to FixedLocation
    op.rename_table('location', 'fixedlocation')

    # Add the geolocation_id column
    op.add_column(
            'fixedlocation',
            sa.Column(
                'geolocation_id',
                sa.Integer(),
                nullable=True,
                unique=True,
            ),
    )

    # Copy the latitude and longitude columns of FixedLocation into a new
    # Geolocation row, and link that row to the FixedLocation row.
    for location in session.query(FixedLocation).all():
        g = Geolocation(
                latitude=location.latitude,
                longitude=location.longitude,
        )

        location.geolocation = g

        session.add(location)

    op.alter_column(
            'fixedlocation',
            'geolocation_id',
            nullable=True,
    )

    # Drop the latitude and longitude columns from the FixedLocation table
    op.drop_column('fixedlocation', 'latitude')
    op.drop_column('fixedlocation', 'longitude')

    # Rename the location_id column to fixed_location_id in Business
    op.alter_column(
            'business',
            'location_id',
            new_column_name='fixed_location_id',
    )

    # Rename the home_location_id column to fixed_location_id in Employee
    op.alter_column(
            'employee',
            'home_location_id',
            new_column_name='fixed_location_id',
    )

    # Create the column for representing an employee's current location
    # We create it nullable to give us a chance to populate it, then we'll use
    # an alter_column to make it not nullable
    op.add_column(
            'employee',
            sa.Column(
                'current_location_id',
                sa.Integer(),
                nullable=True,
            )
    )


    # Loop over all the employees
    for e in session.query(Employee).all():
        # And set their current location to their fixed location.
        g = Geolocation(
                **{
                    n: getattr(e.fixed_location.geolocation, n)
                    for n
                    in [
                        'latitude',
                        'longitude',
                    ]
                }
        )

        e.current_location = g

        session.add(e)

    session.commit()

    # XXX We get an integrity error here ! Apparently, the column contains null
    # values. Perhaps instead of the for-loop approach here, we can use SQLA's
    # session.update.
    # Enforce that the current_location column is not null.
    op.alter_column(
            'employee',
            'current_location_id',
            nullable=False,
    )

    op.drop_constraint('fk_business_location_id_location', 'business', type_='foreignkey')
    op.create_foreign_key(op.f('fk_business_fixed_location_id_fixedlocation'), 'business', 'fixedlocation', ['fixed_location_id'], ['id'])
    op.drop_constraint('fk_employee_home_location_id_location', 'employee', type_='foreignkey')
    op.create_foreign_key(op.f('fk_employee_current_location_id_geolocation'), 'employee', 'geolocation', ['current_location_id'], ['id'])
    op.create_foreign_key(op.f('fk_employee_fixed_location_id_fixedlocation'), 'employee', 'fixedlocation', ['fixed_location_id'], ['id'])


def downgrade():
    bind = op.get_bind()
    session = Session(bind=bind)

    # Rename the fixed_location_id column back to home_location_id for Employee
    op.alter_column(
            'employee',
            'fixed_location_id',
            new_column_name='home_location_id',
    )

    # Fix the constraints
    op.drop_constraint(
            op.f('fk_employee_fixed_location_id_fixedlocation'),
            'employee',
            type_='foreignkey',
    )

    op.drop_constraint(
            op.f('fk_employee_current_location_id_geolocation'),
            'employee',
            type_='foreignkey',
    )

    # Remove the current_location_id column
    op.drop_column('employee', 'current_location_id')

    # Rename the fixed_location_id column back to location_id for Business
    op.alter_column(
            'business',
            'fixed_location_id',
            new_column_name='location_id',
    )

    # Fix the constraints
    op.drop_constraint(
            op.f('fk_business_fixed_location_id_fixedlocation'),
            'business',
            type_='foreignkey',
    )

    # Recreate the latitude and longitude columns on the Location table
    # Create them nullable to give us a chance to populate them
    op.add_column(
            'fixedlocation',
            sa.Column(
                'latitude',
                sa.Float(),
                sa.CheckConstraint(
                    'latitude > -90.0 AND latitude < 90.0',
                    name='latitude',
                ),
                nullable=True,
            ),
    )

    op.add_column(
            'fixedlocation',
            sa.Column(
                'longitude',
                sa.Float(),
                sa.CheckConstraint(
                    'longitude > -180.0 AND longitude < 180.0',
                    name='longitude',
                ),
                nullable=True,
            ),
    )

    # Copy the data from the geolocation table back into the location table
    for location in session.query(FixedLocation).all():
        location.latitude = location.geolocation.latitude
        location.longitude = location.geolocation.longitude
        session.add(location)

    # Remove the geolocation_id column
    op.drop_column(
            'fixedlocation',
            'geolocation_id',
    )

    session.commit()

    # Make the latitude and longitude not nullable
    op.alter_column('fixedlocation', 'latitude', nullable=False)
    op.alter_column('fixedlocation', 'longitude', nullable=False)

    # Rename the FixedLocation table back to Location
    op.rename_table(
            'fixedlocation',
            'location',
    )

    op.create_foreign_key(
            'fk_employee_home_location_id_location',
            'employee',
            'location',
            ['home_location_id'],
            ['id'],
    )

    op.create_foreign_key(
            'fk_business_location_id_location',
            'business',
            'location',
            ['location_id'],
            ['id'],
    )

    # Remove the geolocation table
    op.drop_table('geolocation')

    # Commit the data changes
    session.commit()
